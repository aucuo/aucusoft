// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using api.Context;

#nullable disable

namespace api.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20240421214138_UniversityProjectInit")]
    partial class UniversityProjectInit
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_0900_ai_ci")
                .HasAnnotation("ProductVersion", "7.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4");

            modelBuilder.Entity("api.Models.Client", b =>
                {
                    b.Property<int>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ClientID");

                    b.Property<string>("ContactPerson")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Industry")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("ClientId")
                        .HasName("PRIMARY");

                    b.ToTable("clients", (string)null);
                });

            modelBuilder.Entity("api.Models.Clientfeedback", b =>
                {
                    b.Property<int>("FeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("FeedbackID");

                    b.Property<int?>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("ClientID");

                    b.Property<DateOnly?>("Date")
                        .HasColumnType("date");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int")
                        .HasColumnName("ProjectID");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.HasKey("FeedbackId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ClientId" }, "ClientID");

                    b.HasIndex(new[] { "ProjectId" }, "ProjectID");

                    b.ToTable("clientfeedback", (string)null);
                });

            modelBuilder.Entity("api.Models.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DepartmentID");

                    b.Property<int?>("ManagerId")
                        .HasColumnType("int")
                        .HasColumnName("ManagerID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("DepartmentId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ManagerId" }, "fk_departments_managers");

                    b.ToTable("departments", (string)null);
                });

            modelBuilder.Entity("api.Models.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EmployeeID");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int")
                        .HasColumnName("DepartmentID");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("PositionId")
                        .HasColumnType("int")
                        .HasColumnName("PositionID");

                    b.HasKey("EmployeeId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "DepartmentId" }, "DepartmentID");

                    b.HasIndex(new[] { "PositionId" }, "PositionID");

                    b.ToTable("employees", (string)null);
                });

            modelBuilder.Entity("api.Models.Employeetask", b =>
                {
                    b.Property<int>("EmployeeTaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EmployeeTaskID");

                    b.Property<DateOnly?>("Date")
                        .HasColumnType("date");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("EmployeeID");

                    b.Property<int?>("TaskId")
                        .HasColumnType("int")
                        .HasColumnName("TaskID");

                    b.Property<int?>("TimeSpent")
                        .HasColumnType("int");

                    b.HasKey("EmployeeTaskId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "TaskId" }, "TaskID");

                    b.HasIndex(new[] { "EmployeeId" }, "employeetasks_ibfk_2");

                    b.ToTable("employeetasks", (string)null);
                });

            modelBuilder.Entity("api.Models.Manager", b =>
                {
                    b.Property<int>("ManagerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ManagerID");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Position")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("ManagerId")
                        .HasName("PRIMARY");

                    b.ToTable("managers", (string)null);
                });

            modelBuilder.Entity("api.Models.Meeting", b =>
                {
                    b.Property<int>("MeetingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MeetingID");

                    b.Property<string>("Agenda")
                        .HasColumnType("text");

                    b.Property<DateOnly?>("MeetingDate")
                        .HasColumnType("date");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int")
                        .HasColumnName("ProjectID");

                    b.HasKey("MeetingId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ProjectId" }, "ProjectID")
                        .HasDatabaseName("ProjectID1");

                    b.ToTable("meetings", (string)null);
                });

            modelBuilder.Entity("api.Models.Position", b =>
                {
                    b.Property<int>("PositionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PositionID");

                    b.Property<int>("SalaryGrade")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("PositionId")
                        .HasName("PRIMARY");

                    b.ToTable("positions", (string)null);
                });

            modelBuilder.Entity("api.Models.Project", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProjectID");

                    b.Property<decimal?>("Budget")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<int?>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("ClientID");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("ProjectManagerId")
                        .HasColumnType("int")
                        .HasColumnName("ProjectManagerID");

                    b.Property<DateOnly?>("StartDate")
                        .HasColumnType("date");

                    b.HasKey("ProjectId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ClientId" }, "ClientID")
                        .HasDatabaseName("ClientID1");

                    b.HasIndex(new[] { "ProjectManagerId" }, "ProjectManagerID");

                    b.ToTable("projects", (string)null);
                });

            modelBuilder.Entity("api.Models.Projectdocument", b =>
                {
                    b.Property<int>("DocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DocumentID");

                    b.Property<DateOnly?>("CreationDate")
                        .HasColumnType("date");

                    b.Property<string>("DocumentPath")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int")
                        .HasColumnName("ProjectID");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("DocumentId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ProjectId" }, "ProjectID")
                        .HasDatabaseName("ProjectID2");

                    b.ToTable("projectdocuments", (string)null);
                });

            modelBuilder.Entity("api.Models.Projecttechnology", b =>
                {
                    b.Property<int>("ProjectTechnologyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProjectTechnologyID");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int")
                        .HasColumnName("ProjectID");

                    b.Property<int?>("TechnologyId")
                        .HasColumnType("int")
                        .HasColumnName("TechnologyID");

                    b.HasKey("ProjectTechnologyId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ProjectId" }, "ProjectID")
                        .HasDatabaseName("ProjectID3");

                    b.HasIndex(new[] { "TechnologyId" }, "TechnologyID");

                    b.ToTable("projecttechnologies", (string)null);
                });

            modelBuilder.Entity("api.Models.Task", b =>
                {
                    b.Property<int>("TaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TaskID");

                    b.Property<int?>("AssignedTo")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int")
                        .HasColumnName("ProjectID");

                    b.Property<DateOnly?>("StartDate")
                        .HasColumnType("date");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("StatusID");

                    b.HasKey("TaskId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "AssignedTo" }, "AssignedTo");

                    b.HasIndex(new[] { "ProjectId" }, "ProjectID")
                        .HasDatabaseName("ProjectID4");

                    b.HasIndex(new[] { "StatusId" }, "StatusID");

                    b.ToTable("tasks", (string)null);
                });

            modelBuilder.Entity("api.Models.Taskstatus", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StatusID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("StatusId")
                        .HasName("PRIMARY");

                    b.ToTable("taskstatuses", (string)null);
                });

            modelBuilder.Entity("api.Models.Technology", b =>
                {
                    b.Property<int>("TechnologyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TechnologyID");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("TechnologyId")
                        .HasName("PRIMARY");

                    b.ToTable("technologies", (string)null);
                });

            modelBuilder.Entity("api.Models.Worklog", b =>
                {
                    b.Property<int>("WorkLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("WorkLogID");

                    b.Property<DateOnly?>("Date")
                        .HasColumnType("date");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("EmployeeID");

                    b.Property<int?>("HoursWorked")
                        .HasColumnType("int");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int")
                        .HasColumnName("ProjectID");

                    b.HasKey("WorkLogId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "EmployeeId" }, "EmployeeID");

                    b.HasIndex(new[] { "ProjectId" }, "ProjectID")
                        .HasDatabaseName("ProjectID5");

                    b.ToTable("worklogs", (string)null);
                });

            modelBuilder.Entity("api.Models.Clientfeedback", b =>
                {
                    b.HasOne("api.Models.Client", "Client")
                        .WithMany("Clientfeedbacks")
                        .HasForeignKey("ClientId")
                        .HasConstraintName("clientfeedback_ibfk_2");

                    b.HasOne("api.Models.Project", "Project")
                        .WithMany("Clientfeedbacks")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("clientfeedback_ibfk_1");

                    b.Navigation("Client");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("api.Models.Department", b =>
                {
                    b.HasOne("api.Models.Manager", "Manager")
                        .WithMany("Departments")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_departments_managers");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("api.Models.Employee", b =>
                {
                    b.HasOne("api.Models.Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("employees_ibfk_2");

                    b.HasOne("api.Models.Position", "Position")
                        .WithMany("Employees")
                        .HasForeignKey("PositionId")
                        .HasConstraintName("employees_ibfk_1");

                    b.Navigation("Department");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("api.Models.Employeetask", b =>
                {
                    b.HasOne("api.Models.Employee", "Employee")
                        .WithMany("Employeetasks")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("employeetasks_ibfk_2");

                    b.HasOne("api.Models.Task", "Task")
                        .WithMany("Employeetasks")
                        .HasForeignKey("TaskId")
                        .HasConstraintName("employeetasks_ibfk_1");

                    b.Navigation("Employee");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("api.Models.Meeting", b =>
                {
                    b.HasOne("api.Models.Project", "Project")
                        .WithMany("Meetings")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("meetings_ibfk_1");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("api.Models.Project", b =>
                {
                    b.HasOne("api.Models.Client", "Client")
                        .WithMany("Projects")
                        .HasForeignKey("ClientId")
                        .HasConstraintName("projects_ibfk_1");

                    b.HasOne("api.Models.Employee", "ProjectManager")
                        .WithMany("Projects")
                        .HasForeignKey("ProjectManagerId")
                        .HasConstraintName("projects_ibfk_2");

                    b.Navigation("Client");

                    b.Navigation("ProjectManager");
                });

            modelBuilder.Entity("api.Models.Projectdocument", b =>
                {
                    b.HasOne("api.Models.Project", "Project")
                        .WithMany("Projectdocuments")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("projectdocuments_ibfk_1");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("api.Models.Projecttechnology", b =>
                {
                    b.HasOne("api.Models.Project", "Project")
                        .WithMany("Projecttechnologies")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("projecttechnologies_ibfk_1");

                    b.HasOne("api.Models.Technology", "Technology")
                        .WithMany("Projecttechnologies")
                        .HasForeignKey("TechnologyId")
                        .HasConstraintName("projecttechnologies_ibfk_2");

                    b.Navigation("Project");

                    b.Navigation("Technology");
                });

            modelBuilder.Entity("api.Models.Task", b =>
                {
                    b.HasOne("api.Models.Employee", "AssignedToNavigation")
                        .WithMany("Tasks")
                        .HasForeignKey("AssignedTo")
                        .HasConstraintName("tasks_ibfk_2");

                    b.HasOne("api.Models.Project", "Project")
                        .WithMany("Tasks")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("tasks_ibfk_1");

                    b.HasOne("api.Models.Taskstatus", "Status")
                        .WithMany("Tasks")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("tasks_ibfk_3");

                    b.Navigation("AssignedToNavigation");

                    b.Navigation("Project");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("api.Models.Worklog", b =>
                {
                    b.HasOne("api.Models.Employee", "Employee")
                        .WithMany("Worklogs")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("worklogs_ibfk_1");

                    b.HasOne("api.Models.Project", "Project")
                        .WithMany("Worklogs")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("worklogs_ibfk_2");

                    b.Navigation("Employee");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("api.Models.Client", b =>
                {
                    b.Navigation("Clientfeedbacks");

                    b.Navigation("Projects");
                });

            modelBuilder.Entity("api.Models.Department", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("api.Models.Employee", b =>
                {
                    b.Navigation("Employeetasks");

                    b.Navigation("Projects");

                    b.Navigation("Tasks");

                    b.Navigation("Worklogs");
                });

            modelBuilder.Entity("api.Models.Manager", b =>
                {
                    b.Navigation("Departments");
                });

            modelBuilder.Entity("api.Models.Position", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("api.Models.Project", b =>
                {
                    b.Navigation("Clientfeedbacks");

                    b.Navigation("Meetings");

                    b.Navigation("Projectdocuments");

                    b.Navigation("Projecttechnologies");

                    b.Navigation("Tasks");

                    b.Navigation("Worklogs");
                });

            modelBuilder.Entity("api.Models.Task", b =>
                {
                    b.Navigation("Employeetasks");
                });

            modelBuilder.Entity("api.Models.Taskstatus", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("api.Models.Technology", b =>
                {
                    b.Navigation("Projecttechnologies");
                });
#pragma warning restore 612, 618
        }
    }
}
